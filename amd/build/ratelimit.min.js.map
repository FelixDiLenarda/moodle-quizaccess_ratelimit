{"version":3,"file":"ratelimit.min.js","sources":["../src/ratelimit.js"],"sourcesContent":["/**\n * Quiz rate limiting JS code.\n *\n * @module    mod_quiz/add_question_modal_launcher\n * @copyright 2021 Martin Gauk, TU Berlin <gauk@math.tu-berlin.de>\n */\n\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport {markFormSubmitted} from 'core_form/changechecker';\n\nconst form = '#mod_quiz_preflight_form';\nconst button = form + ' input#id_submitbutton';\n\nexport const init = (maxDelay) => {\n    const maxDelayUntil = Date.now() + maxDelay * 1000;\n    // Eventhandling\n    const handleClick = (e) => {\n        if (e.target.id !== 'id_submitbutton') {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Remove the event\n        e.currentTarget.removeEventListener('click', handleClick, true);\n\n        Ajax.call([{\n            methodname: 'quizaccess_ratelimit_get_waiting_time',\n            args: {},\n            done: (response) => {\n                maxDelay = Math.floor((maxDelayUntil - Date.now()) / 1000);\n                maxDelay = Math.max(0, maxDelay);\n                if (response.seconds >= maxDelay) {\n                    // Spread the delay between 0 and maxdelay evenly.\n                    const rand = Math.floor(Math.random() * maxDelay);\n                    delaySubmit(rand, response.message);\n                } else {\n                    delaySubmit(response.seconds, response.message);\n                }\n            },\n            fail: () => {\n                // Do a random short delay.\n                const rand = Math.floor(Math.random() * 10);\n                delaySubmit(rand);\n            }\n        }]);\n    };\n\n    // Register click listener to root element '#mod_quiz_preflight_form' in capture phase to prevent propagation\n    // to the button-click listener in mod/quiz/amd/src/preflight.js:66 and therefore stop this event from firing.\n    const formElement = document.querySelector('#mod_quiz_preflight_form');\n    if (formElement) {\n        formElement.addEventListener('click', handleClick, true);\n    }\n};\n\nconst delaySubmit = function(seconds, message = '') {\n    const buttonEl = document.querySelector(button);\n    buttonEl.disabled = true;\n    if (seconds === 0) {\n        submitForm();\n        return;\n    }\n\n    // Tell the user what is happening when the delay is too long.\n    if (seconds > 10) {\n        ModalFactory.create({\n            body: message,\n        }).then(\n            (modal) => modal.show()\n        ).catch(\n            () => null\n        );\n    }\n\n    const endTime = Date.now() + seconds * 1000;\n    const buttonVal = $(button).val();\n\n    const checkSubmitCancelled = () => {\n        // Submit is cancelled when the form is not visible, i.e. the modal was closed.\n        if ($(form).is(\":visible\")) {\n            return false;\n        }\n        clearInterval(interval);\n        clearTimeout(timeout);\n        $(button).prop(\"disabled\", false);\n        $(button).val(buttonVal);\n        return true;\n    };\n\n    const updateButtonValue = () => {\n        const secsLeft = Math.round((endTime - Date.now()) / 1000);\n        const formatted = Math.floor(secsLeft / 60).toString() + ':' +\n            (secsLeft % 60).toString().padStart(2, '0');\n        $(button).val(buttonVal + ' (' + formatted + ')');\n        checkSubmitCancelled();\n    };\n\n    updateButtonValue();\n    const interval = setInterval(updateButtonValue, 1000);\n\n    const timeout = setTimeout(() => {\n        clearInterval(interval);\n        if (!checkSubmitCancelled()) {\n            submitForm();\n        }\n    }, seconds * 1000);\n};\n\nconst submitForm = function() {\n    const formEl = document.querySelector(form);\n    markFormSubmitted(formEl);\n    $(button).prop(\"disabled\", false);\n    $(button).click();\n};"],"names":["form","button","maxDelay","maxDelayUntil","Date","now","handleClick","e","target","id","preventDefault","stopPropagation","currentTarget","removeEventListener","call","methodname","args","done","response","Math","floor","max","seconds","rand","random","delaySubmit","message","fail","formElement","document","querySelector","addEventListener","buttonEl","disabled","submitForm","create","body","then","modal","show","catch","endTime","buttonVal","val","checkSubmitCancelled","is","clearInterval","interval","clearTimeout","timeout","prop","updateButtonValue","secsLeft","round","formatted","toString","padStart","setInterval","setTimeout","formEl","click"],"mappings":"+dAYMA,KAAO,2BACPC,OAASD,KAAO,uCAEDE,iBACXC,cAAgBC,KAAKC,MAAmB,IAAXH,SAE7BI,YAAeC,IACG,oBAAhBA,EAAEC,OAAOC,KAGbF,EAAEG,iBACFH,EAAEI,kBAGFJ,EAAEK,cAAcC,oBAAoB,QAASP,aAAa,iBAErDQ,KAAK,CAAC,CACPC,WAAY,wCACZC,KAAM,GACNC,KAAOC,cACHhB,SAAWiB,KAAKC,OAAOjB,cAAgBC,KAAKC,OAAS,KACrDH,SAAWiB,KAAKE,IAAI,EAAGnB,UACnBgB,SAASI,SAAWpB,SAAU,OAExBqB,KAAOJ,KAAKC,MAAMD,KAAKK,SAAWtB,UACxCuB,YAAYF,KAAML,SAASQ,cAE3BD,YAAYP,SAASI,QAASJ,SAASQ,UAG/CC,KAAM,WAEIJ,KAAOJ,KAAKC,MAAsB,GAAhBD,KAAKK,UAC7BC,YAAYF,YAOlBK,YAAcC,SAASC,cAAc,4BACvCF,aACAA,YAAYG,iBAAiB,QAASzB,aAAa,UAIrDmB,YAAc,SAASH,aAASI,+DAAU,SACtCM,SAAWH,SAASC,cAAc7B,WACxC+B,SAASC,UAAW,EACJ,IAAZX,oBACAY,aAKAZ,QAAU,2BACGa,OAAO,CAChBC,KAAMV,UACPW,MACEC,OAAUA,MAAMC,SACnBC,OACE,IAAM,aAIRC,QAAUrC,KAAKC,MAAkB,IAAViB,QACvBoB,WAAY,mBAAEzC,QAAQ0C,MAEtBC,qBAAuB,MAErB,mBAAE5C,MAAM6C,GAAG,cAGfC,cAAcC,UACdC,aAAaC,6BACXhD,QAAQiD,KAAK,YAAY,uBACzBjD,QAAQ0C,IAAID,YACP,GAGLS,kBAAoB,WAChBC,SAAWjC,KAAKkC,OAAOZ,QAAUrC,KAAKC,OAAS,KAC/CiD,UAAYnC,KAAKC,MAAMgC,SAAW,IAAIG,WAAa,KACpDH,SAAW,IAAIG,WAAWC,SAAS,EAAG,yBACzCvD,QAAQ0C,IAAID,UAAY,KAAOY,UAAY,KAC7CV,wBAGJO,0BACMJ,SAAWU,YAAYN,kBAAmB,KAE1CF,QAAUS,YAAW,KACvBZ,cAAcC,UACTH,wBACDV,eAEK,IAAVZ,UAGDY,WAAa,iBACTyB,OAAS9B,SAASC,cAAc9B,2CACpB2D,4BAChB1D,QAAQiD,KAAK,YAAY,uBACzBjD,QAAQ2D"}